-- Schema for job applications
CREATE TABLE public.applications (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
  job_id BIGINT NOT NULL REFERENCES public.jobs(id) ON DELETE CASCADE,
  status TEXT NOT NULL DEFAULT 'submitted',
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  CONSTRAINT "applications_user_id_job_id_key" UNIQUE (user_id, job_id)
);

COMMENT ON TABLE public.applications IS 'Tracks job applications submitted by users.';
COMMENT ON COLUMN public.applications.status IS 'The current status of the application (e.g., submitted, reviewing, interview, rejected, offered).';

-- Set up Row Level Security (RLS)
ALTER TABLE public.applications ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view their own applications."
ON public.applications FOR SELECT
USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own applications."
ON public.applications FOR INSERT
WITH CHECK (auth.uid() = user_id);

-- This trigger automatically updates the `updated_at` column
CREATE OR REPLACE FUNCTION public.handle_application_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER on_application_update_set_updated_at
BEFORE UPDATE ON public.applications
FOR EACH ROW
EXECUTE PROCEDURE public.handle_application_updated_at();
