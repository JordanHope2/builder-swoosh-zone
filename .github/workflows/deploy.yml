name: Deploy jobequal.ch (Swizzonic + Cloudflare + Builder.io)

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - '.github/ISSUE_TEMPLATE/**'
  workflow_dispatch:

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    env:
      NODE_VERSION: '20'
      INSTALL_CMD: 'npm ci'
      BUILD_CMD: 'npm run build'
      # Default; we’ll auto-detect below if it's actually dist/spa
      BUILD_DIR: 'dist'

      SITE_URL: 'https://jobequal.ch'
      HEALTHCHECK_PATH: '/'
      HEALTHCHECK_RETRIES: '10'
      HEALTHCHECK_WAIT_SEC: '6'

      # Builder at build-time (support both Next and Vite/Quasar)
      NEXT_PUBLIC_BUILDER_API_KEY: ${{ secrets.BUILDER_IO_API_KEY }}
      VITE_BUILDER_API_KEY:        ${{ secrets.BUILDER_IO_API_KEY }}

      # FTP / SFTP secrets (may be empty)
      FTP_SERVER:     ${{ secrets.FTP_SERVER }}
      FTP_USERNAME:   ${{ secrets.FTP_USERNAME }}
      FTP_PASSWORD:   ${{ secrets.FTP_PASSWORD }}
      FTP_TARGET_DIR: ${{ secrets.FTP_TARGET_DIR }}

      SFTP_HOST:       ${{ secrets.SFTP_HOST }}
      SFTP_USERNAME:   ${{ secrets.SFTP_USERNAME }}
      SFTP_PASSWORD:   ${{ secrets.SFTP_PASSWORD }}
      SFTP_TARGET_DIR: ${{ secrets.SFTP_TARGET_DIR }}

      # Cloudflare
      CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
      CF_ZONE_ID:   ${{ secrets.CF_ZONE_ID }}

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 1

      - name: Use Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: ${{ env.INSTALL_CMD }}

      - name: Build
        run: ${{ env.BUILD_CMD }}

      # Detect actual build output (dist/spa > dist) and expose as an output
      - name: Detect build dir
        id: detect_build_dir
        shell: bash
        run: |
          set -euo pipefail
          if [ -d "${BUILD_DIR}" ] && [ "$(ls -A "${BUILD_DIR}")" ]; then
            use="${BUILD_DIR}"
          elif [ -d "dist/spa" ] && [ "$(ls -A dist/spa)" ]; then
            use="dist/spa"
          elif [ -d "dist" ] && [ "$(ls -A dist)" ]; then
            use="dist"
          else
            echo "❌ No build dir found (checked ${BUILD_DIR}, dist/spa, dist)"; exit 1
          fi
          echo "build_dir=$use" >> "$GITHUB_OUTPUT"
          echo "✅ Using build dir: $use"

      - name: Add robots.txt and .htaccess
        shell: bash
        env:
          USE_BUILD_DIR: ${{ steps.detect_build_dir.outputs.build_dir }}
        run: |
          set -euo pipefail
          cp -f scripts/deploy/robots.txt  "${USE_BUILD_DIR}/robots.txt"
          echo "Injected robots.txt into ${USE_BUILD_DIR}"

      - name: Write deploy marker
        run: echo "${{ github.sha }} $(date -u +%FT%TZ)" > "${{ steps.detect_build_dir.outputs.build_dir }}/version.txt"

      - name: Preview build contents
        run: |
          set -euo pipefail
          echo "BUILD_DIR=${{ steps.detect_build_dir.outputs.build_dir }}"
          ls -la "${{ steps.detect_build_dir.outputs.build_dir }}"
          echo "Preview files to deploy:"
          find "${{ steps.detect_build_dir.outputs.build_dir }}" -maxdepth 2 -type f | head -n 50

      - name: Archive build artifact (for debugging/proof)
        run: tar -czf build-artifact.tgz "${{ steps.detect_build_dir.outputs.build_dir }}"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: build-artifact.tgz
          retention-days: 7

      # =========================
      # Deploy (prefer SFTP over FTP if both are configured)
      # =========================

      # --- SFTP (preferred) ---
      - name: Deploy via SFTP
        id: deploy_sftp
        if: ${{ env.SFTP_HOST != '' && env.SFTP_USERNAME != '' && env.SFTP_PASSWORD != '' }}
        uses: wlixcc/SFTP-Deploy-Action@v1.2.4
        with:
          username: ${{ env.SFTP_USERNAME }}
          server: ${{ env.SFTP_HOST }}
          password: ${{ env.SFTP_PASSWORD }}
          local_path: '${{ steps.detect_build_dir.outputs.build_dir }}/'
          remote_path: ${{ env.SFTP_TARGET_DIR || '/httpdocs' }}
          sftp_only: true

      # --- FTP (fallback if SFTP fails or is not configured) ---
      - name: Deploy via FTP (fallback)
        id: deploy_ftp
        if: ${{ (steps.deploy_sftp.outcome != 'success' || env.SFTP_HOST == '') && env.FTP_SERVER != '' && env.FTP_USERNAME != '' && env.FTP_PASSWORD != '' }}
        uses: SamKirkland/FTP-Deploy-Action@v4.3.6
        with:
          server:     ${{ env.FTP_SERVER }}
          username:   ${{ env.FTP_USERNAME }}
          password:   ${{ env.FTP_PASSWORD }}
          # MUST be trailing slash
          local-dir:  ${{ steps.detect_build_dir.outputs.build_dir }}/
          server-dir: ${{ env.FTP_TARGET_DIR != '' && env.FTP_TARGET_DIR || 'public_html' }}
          protocol:   ftps
          log-level:  verbose
          dangerous-clean-slate: false

      # =========================
      # Cloudflare cache purge (only if token+zone configured AND deploy ran)
      # =========================
      - name: Install jq
        if: ${{ (steps.deploy_sftp.outcome == 'success' || steps.deploy_ftp.outcome == 'success') && env.CF_API_TOKEN != '' && env.CF_ZONE_ID != '' }}
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Purge Cloudflare cache
        if: ${{ (steps.deploy_sftp.outcome == 'success' || steps.deploy_ftp.outcome == 'success') && env.CF_API_TOKEN != '' && env.CF_ZONE_ID != '' }}
        run: |
          set -euo pipefail
          curl -s -X POST "https://api.cloudflare.com/client/v4/zones/${CF_ZONE_ID}/purge_cache" \
            -H "Authorization: Bearer ${CF_API_TOKEN}" \
            -H "Content-Type: application/json" \
            --data '{"purge_everything":true}' | tee purge_cf.json
          jq -e '.success == true' purge_cf.json

      # =========================
      # Health check (follow redirects; accept 2xx/3xx)
      # =========================
      - name: Health check after deploy
        run: |
          set -euo pipefail
          url="${SITE_URL}${HEALTHCHECK_PATH}"
          echo "Checking $url ..."
          ok=0
          for i in $(seq 1 ${HEALTHCHECK_RETRIES}); do
            code=$(curl -sk -o /dev/null -I -L -w "%{http_code}" "$url")
            echo "Attempt $i: HTTP $code"
            if [ "$code" -ge 200 ] && [ "$code" -lt 400 ]; then
              ok=1; break
            fi
            sleep ${HEALTHCHECK_WAIT_SEC}
          done
          if [ $ok -ne 1 ]; then
            echo "Health check failed for $url"
            exit 1
          fi

      - name: Show response headers (proof)
        run: curl -sIL "${SITE_URL}${HEALTHCHECK_PATH}"
